from core import *
import os

class hardware(object):
	def __init__(self, cores):
		self.core_set = []
		for core_idx in range(0, cores):
			new_core = core(core_idx)
			self.core_set.append(new_core)

	def print_hardware(self):
		for core in self.core_set:
			core.print_core()

	#at the end of sampling window, calculate each core's power, utilization, and frequency
	def DVFS(self, lsw, exp_funcs):
		cores_frequencies = []
		cores_utils = []
		cores_temperature = []
		for core in self.core_set:
			core.get_power(lsw)
			cores_temperature.append(core.temperature)
			cores_frequencies.append(core.frequency)
			cores_utils.append(core.utilization)
		scaling_frequencies = exp_funcs.DVFS(cores_frequencies, cores_utils, cores_temperature)
		for core_idx in range(0, len(self.core_set)):
			self.core_set[core_idx].set_frequency(scaling_frequencies[core_idx])

	#at the end of profiling window, generate power profile and simulate temperature by hotspot
	def get_temperature(self):
		#generate power profile
		ptrace_file = open("./hotspot/hotspot.ptrace", "w")

		for core_idx in range(0, len(self.core_set)):
			ptrace_file.write('m' + str(core_idx + 1) + '\t')
		ptrace_file.write('\n')

		for power_idx in range(0, len(self.core_set[0].power)):
			for core in self.core_set:
				ptrace_file.write(str(core.power[power_idx]) + '\t')
			ptrace_file.write('\n')
		ptrace_file.close()

		os.system("./hotspot/hotspot " +
			      "-c ./hotspot/hotspot.config " +
			      "-init_file ./hotspot/hotspot.init " +
			      "-f ./hotspot/hotspot.flp " +
			      "-p ./hotspot/hotspot.ptrace " +
			      "-o ./hotspot/hotspot.ttrace " +
			      "> /dev/null")

		#temperature profile generated by hotspot is saved in each core's temperature_list
		ttrace_file = open("./hotspot/hotspot.ttrace", "r")
		lines = ttrace_file.readlines()[1: ]
		ttrace_file.close()
		
		for line in lines:
			ts = line.split('\t')
			if len(ts) > 0:
				for core in self.core_set:
					core.temperature_list.append(float(ts[core.core_id]))

		#the last temperature of current simulation is save to calculate power
		for core in self.core_set:
			core.temperature = core.temperature_list[-1]

		#the last temperature of current simulation is the initial temperature for next simulation
		init_file = open("./hotspot/hotspot.init", "r")
		lines = init_file.readlines()
		init_file.close()

		init_file = open("./hotspot/hotspot.init", "w")
		for core in self.core_set:
			init_file.write('m' + str(core.core_id + 1) + '\t' + str(core.temperature + 273.15) + '\n')
		for line_idx in range(len(self.core_set), len(lines)):
			init_file.write(lines[line_idx])
		init_file.close()

		#reset core's power profile
		for core in self.core_set:
			core.power = []

	def get_reliability(self, lsw):
		#generate reliability input file
		rel_input = open("./rTool/input.txt", "w")
		rel_input.write("l 5.4 0 0 0\n")
		rel_input.write("w 5 0.25 0.25 0.25\n")
		rel_input.write("w 5 0.25 0.25 0.25\n")
		rel_input.write("w 5 0.25 0.25 0.25\n")
		rel_input.write("t 5\n")
		rel_input.write("40.7587 120 1e12 120 1.0 110 1e09 5000 0.25 0.25 0.25 0.25\n")
		rel_input.write("s ")
		for core_idx in range(0, len(self.core_set)):
			rel_input.write("1")
		rel_input.write('\n')

		for core in self.core_set:
			rel_input.write("component " + str(core.core_id) + '\n')
			for temperature_idx in range(0, len(core.temperature_list)):
				rel_input.write(str(lsw) + ' ' + str(core.temperature_list[temperature_idx]) + " 1.0 1e09\n")
		rel_input.close()

		for core in self.core_set:
			core.temperature_list = []

		os.system("./rTool/solver -r ./rTool/input.txt > ./rTool/output.txt")
		
		rel_output = open("./rTool/output.txt", "r")
		lines = rel_output.readlines()
		rel_output.close()

		mttf = float(lines[-1].split(':')[-1].split(' ')[1])
		return mttf
		
	def output(self, output_path):
		output_file = open(output_path, "w")
		for core in self.core_set:
			for task in core.taskset:
				output_file.write("name: " + task.name + "\tmiss: " + str(task.miss) + "\tcompleted: " + str(task.completed) + '\n')
		output_file.close()



